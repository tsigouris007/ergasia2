This code is from Chapter 12 of the book
"Algorithms in C, Third Edition,"
by Robert Sedgewick, Addison-Wesley, 1998.


-----
/* Definitions for the interface for the symbol table - file ST.h */

void STinit(int);
 int STcount();
void STinsert(Item);
Item STsearch(Key);
void STdelete(Item);
Item STselect(int);
void STsort(void (*visit)(Item));
-----

/* Definitions for the interface for items - file Item.h */

typedef int Item;
typedef int Key;

#define NULLitem-1 /* NULLitem is a constant */

#define key(A) (A)
#define less(A, B) (key(A) < key(B))
#define eq(A, B) (!less(A, B) && !less(B, A))

Item ITEMrand(void);
int ITEMscan(Item *);
void ITEMshow(Item);
-----

/* Code for the implementation of the interface for items - file of type .c */

int ITEMrand(void)
    { return rand(); }

int ITEMscan(int*x)
    { return scanf("%d", x); }

void ITEMshow(intx)
     { printf("%5d ", x); }
------
/* Code for the implementation of the interface for symbol tables - file of type .c */

#include <stdlib.h>
#include "Item.h"

typedef struct STnode* link;
struct STnode { Item item; link l, r; int N };

static link head, z;

link NEW(Item item, link l, link r, int N)
  { link x = malloc(sizeof *x);
    x->item = item; x->l = l; x->r = r; x->N = N;
    return x;
  }

void STinit()
  { head = (z = NEW(NULLitem, NULL, NULL, 0)); }

int STcount() { return head->N; }

Item searchR(link h, Key v)
  { Key t = key(h->item);
    if (h == z) return NULLitem;
    if eq(v, t) return h->item;
    if less(v, t) return searchR(h->l, v);
             else return searchR(h->r, v);
  }

Item STsearch(Key v)
  { return searchR(head, v); }

link insertR(link h, Item item)
  { Key v = key(item), t = key(h->item);
    if (h == z) return NEW(item, z, z, 1);
    if less(v, t)
         h->l = insertR(h->l, item);
    else h->r = insertR(h->r, item);
    (h->N)++; return h;
  }

void STinsert(Item item)
  { head = insertR(head, item); }

void sortR(link h, void (*visit)(Item))
  {
    if (h == z) return;
    sortR(h->l, visit);
    visit(h->item);
    sortR(h->r, visit);
  }

void STsort(void (*visit)(Item))
  { sortR(head, visit); }
-----

/* code for the main program */

#include <stdio.h>
#include <stdlib.h>
#include "Item.h"
#include "ST.h"

void main(int argc, char *argv[])
 { int N, maxN = atoi(argv[1]), sw = atoi(argv[2]);
    Key v; Item item;
    STinit(maxN);
    for (N = 0; N < maxN; N++)
      {
        if (sw) v = ITEMrand();
          else if (ITEMscan(&v) == EOF) break;
        if (STsearch(v) != NULLitem) continue;
        key(item) = v;
        STinsert(item);
      }
    STsort(ITEMshow); printf("\n");
    printf("%d keys ", N);
    printf("%d distinct keys\n", STcount());
 }
------

/* code for rotations */

link rotR(link h)
  { link x = h->l; h->l = x->r; x->r = h;
    return x; }
link rotL(link h)
  { link x = h->r; h->r = x->l; x->l = h;
    return x; }
-----

/* code for inserting a key at the root of a BST */

link insertT(link h, Item item)
  { Key v = key(item);
    if (h == z) return NEW(item, z, z, 1);
    if (less(v, key(h->item)))
      { h->l = insertT(h->l, item); h = rotR(h); }
    else
      { h->r = insertT(h->r, item); h = rotL(h); }
    return h;
  }

void STinsert(Item item)
  { head = insertT(head, item); }
-----

/* code for finding the k-th smallest item in a BST */

Item selectR(link h, int k)
  { int t = h->l->N;
    if (h == z) return NULLitem;
    if (t > k) return selectR(h->l, k);
    if (t < k) return selectR(h->r, k-t-1);
    return h->item;
  }

Item STselect(int k)
  { return selectR(head, k); }
-----

/* code for partitioning a BST */

link partR(link h, int k)
  { int t = h->l->N;
    if (t > k )
      { h->l = partR(h->l, k); h = rotR(h); }
    if (t < k )
      { h->r = partR(h->r, k-t-1); h = rotL(h); }
    return h;
  }
-----

/* code for deleting a key from a BST */

link joinLR(link a, link b)
  {
    if (b == z) return a;
    b = partR(b, 0); b->l = a;
    return b;
  }

link deleteR(link h, Key v)
  { link x; Key t = key(h->item);
    if (h == z) return z;
    if (less(v, t)) h->l = deleteR(h->l, v);
    if (less(t, v)) h->r = deleteR(h->r, v);
    if (eq(v, t))
      { x = h; h = joinLR(h->l, h->r); free(x); }
    return h;
  }

void STdelete(Key v)
  { head = deleteR(head, v); }
-----

/* code for joining two BSTs */

link STjoin(link a, link b)
  {
    if (b == z) return a;
    if (a == z) return b;
    b = STinsert(b, a->item);
    b->l = STjoin(a->l, b->l);
    b->r = STjoin(a->r, b->r);
    free(a);
    return b;
  }
-----